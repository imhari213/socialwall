var expect = require("chai").expect;


describe("TextLocal", function () {
    describe("#init()", function () {
        it('Should return valid when passed valid config options (username and password supplied).', function () {
            var validOptions = {
                username: 'npm@block17.co.uk',
                password: 'mypassword'
            };

            var tl = require('../index.js')(validOptions);
            expect(tl.validConfig).to.be.true;
        });

        it('Should return valid when passed valid config options (username and hash supplied).', function () {
            var validOptions = {
                username: 'npm@block17.co.uk',
                hash: 'myhash1234567890'
            };

            var tl = require('../index.js')(validOptions);
            expect(tl.validConfig).to.be.true;
        });

        it('Should return valid when passed valid config options (apikey supplied).', function () {
            var validOptions = {
                apikey: 'asdfghjklpoiuytrewqzxcvbnm'
            };

            var tl = require('../index.js')(validOptions);
            expect(tl.validConfig).to.be.true;
        });

        it('Should return not valid when passed invalid config options (username without a password or hash).', function () {
            var invalidOptions = {
                username: 'npm@block17.co.uk'
            };

            var tl = require('../index.js')(invalidOptions);
            expect(tl.validConfig).to.be.false;
        });

        it('Should return a negative account balance before any API operations have been called.', function () {
            var invalidOptions = {
                apikey: 'asdfghjklpoiuytrewqzxcvbnm'
            };

            var tl = require('../index.js')(invalidOptions);
            expect(tl.validConfig).to.be.true;
            expect(tl.smsBalance).to.equal(-1);
        });

    });
});

describe("TextLocal", function () {
    describe("#sendSMS()", function () {
        it('Should return an error when sendSMS is called without valid authentication config.', function () {
            var invalidOptions = {
                username: 'npm@block17.co.uk'
            };

            var tl = require('../index.js')(invalidOptions);
            expect(tl.validConfig).to.be.false;
            tl.sendSMS('01234567890', 'this is a test message', 'Sender', function (err, data) {
                expect(data).to.be.undefined;
                expect(err).to.exist;
            });
        });
    });
});