module.exports = function (options) {

    var http = require('http');
    var querystring = require('querystring');

    var txtModule = {};

    // error constants
    var ERR_NO_VALID_CONFIG = 'No valid config for this operation.';    // for when the user tries an operation with first configuring required parameters
    var ERR_API_NO_STATUS = 'API response is missing a status node.';
    var ERR_API_ODD_STATUS = 'API response status node is not success or fail.';
    var ERR_API_NO_ERRORS = 'API response is missing an errors node.';

    // API methods, URI paths, HTTP header constants
    var POST = 'POST';
    var FORM = 'application/x-www-form-urlencoded';
    var UTF8 = 'utf8';
    var FAILURE = 'failure';
    var SUCCESS = 'success';
    var PATH_SEND_SMS = '/send/?';

    // if an API key is configured, username/password/hash will not be used
    // if an API key is not configured, username is mandatory and one of hash or password is mandatory
    var config = {
        host: 'api.txtlocal.com',
        port: 80,
        username: '',
        password: '',
        hash: '',
        apikey: '',
        sender: 'unknown',
        test: 1
    };

    var validConfig = true;

    // replace defaults with passed in options
    for (var key in options) {
        if ((options.hasOwnProperty(key)) && (config.hasOwnProperty(key))) {
            config[key] = options[key];
        }
    }

    // validate enough options are set in order to authenticate against the API
    if (0 == config.apikey.length) {
        // no api key, username must be present and one of password/hash
        if (0 == config.username.length) validConfig = false;
        if ((0 == config.password.length) && (0 == config.hash.length)) validConfig = false;
    }

    // mainly used for debug/dev, return the current config settings
    txtModule.showConfig = function () {
        console.log('config: ' + JSON.stringify(config));
    };

    // whether or not the initial config is valid (should be checked internally before all APi operations)
    txtModule.validConfig = validConfig;

    // TextLocal account balance
    txtModule.smsBalance = -1;

    // the main event, send an SMS message and operate on the result
    txtModule.sendSMS = function (numbers, message, sender, cb) {
        // don't proceed with an invalid config, the API is just going to reject it anyway
        if (!validConfig) {
            return cb(new Error(ERR_NO_VALID_CONFIG));
        }

        // get auth parameters based on config settings
        var newMessage = makeAuthParameters();

        // add message details to basic auth setup
        newMessage.numbers = numbers;
        newMessage.message = message;
        newMessage.sender = sender;
        newMessage.test = config.test;

        // URI encode parameters for API call
        var qs = querystring.stringify(newMessage);

        var postOptions = {
            host: config.host,
            port: config.port,
            path: PATH_SEND_SMS,
            method: POST,
            headers: {
                'Content-Type': FORM,
                'Content-Length': Buffer.byteLength(qs)
            }
        };

        // set up the response handling
        var req = http.request(postOptions, function (res) {
            res.setEncoding(UTF8);

            var data = '';

            res.on('data', function (chunk) {
                data += chunk;
            });

            res.on('end', function () {
                var response = JSON.parse(data);

                if (!response.status) return cb(new Error(ERR_API_NO_STATUS));

                if (response.status === FAILURE) {
                    if (!response.errors) return cb(new Error(ERR_API_NO_ERRORS));
                    return cb(new Error(makeOneStringFromAPIErrorArray(response.errors)));
                }

                if (response.status !== SUCCESS) return cb(new Error(ERR_API_ODD_STATUS + '(' + response.status + ')'));

                // update the current balance if the API returned the node
                if (response.balance) txtModule.smsBalance = response.balance;

                cb(null, response);
            })
        });

        // post the data
        req.write(qs);
        req.end();
    };

    // private methods
    var makeAuthParameters = function () {
        if (!validConfig) {
            return {};
        }
        if (0 < config.apikey.length) {
            return {apikey: config.apikey};
        }
        var auth = {
            username: config.username
        };
        if (0 < config.password.length) {
            auth.password = config.password;
        } else {
            if (0 < config.hash.length) {
                auth.hash = config.hash;
            }
        }
        return auth;
    };

    var makeOneStringFromAPIErrorArray = function (errorArray) {
        var errorString = '';
        for (var e = 0, el = errorArray.length; e < el; e++) {
            errorString += '(code ' + errorArray[e].code + ') ' + errorArray[e].message + ', ';
        }
        if (0 < errorString.length) {
            return errorString.substring(0, errorString.length - 2);
        }
        return errorString;
    };

    return txtModule;
};

