{
  "_args": [
    [
      {
        "raw": "generic-pool@^3.1.7",
        "scope": null,
        "escapedName": "generic-pool",
        "name": "generic-pool",
        "rawSpec": "^3.1.7",
        "spec": ">=3.1.7 <4.0.0",
        "type": "range"
      },
      "/Users/admin/Desktop/nodejs/myprojectu/node_modules/mssql"
    ]
  ],
  "_from": "generic-pool@>=3.1.7 <4.0.0",
  "_id": "generic-pool@3.1.7",
  "_inCache": true,
  "_location": "/generic-pool",
  "_nodeVersion": "6.9.5",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/generic-pool-3.1.7.tgz_1486647588891_0.5843780315481126"
  },
  "_npmUser": {
    "name": "sandfox",
    "email": "james.butler@sandfox.co.uk"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "generic-pool@^3.1.7",
    "scope": null,
    "escapedName": "generic-pool",
    "name": "generic-pool",
    "rawSpec": "^3.1.7",
    "spec": ">=3.1.7 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/mssql"
  ],
  "_resolved": "https://registry.npmjs.org/generic-pool/-/generic-pool-3.1.7.tgz",
  "_shasum": "dac22b2c7a7a04e41732f7d8d2d25a303c88f662",
  "_shrinkwrap": null,
  "_spec": "generic-pool@^3.1.7",
  "_where": "/Users/admin/Desktop/nodejs/myprojectu/node_modules/mssql",
  "author": {
    "name": "James Cooper",
    "email": "james@bitmechanic.com"
  },
  "bugs": {
    "url": "https://github.com/coopernurse/node-pool/issues"
  },
  "contributors": [
    {
      "name": "James Cooper",
      "email": "james@bitmechanic.com"
    },
    {
      "name": "Peter Galiba",
      "email": "poetro@poetro.hu",
      "url": "http://poetro.hu/"
    },
    {
      "name": "Gary Dusbabek"
    },
    {
      "name": "Tom MacWright",
      "url": "http://www.developmentseed.org/"
    },
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com",
      "url": "http://somethingdoug.com/"
    },
    {
      "name": "calibr"
    },
    {
      "name": "Justin Robinson",
      "email": "jrobinson@redventures.com"
    },
    {
      "name": "Nayana Hettiarachchi",
      "email": "nayana@corp-gems.com"
    },
    {
      "name": "Felipe Machado",
      "email": "felipou@gmail.com"
    },
    {
      "name": "Felix Becker",
      "email": "felix.b@outlook.com"
    },
    {
      "name": "sandfox",
      "email": "james.butler@sandfox.co.uk"
    },
    {
      "name": "Lewis J Ellis",
      "email": "me@lewisjellis.com"
    }
  ],
  "dependencies": {},
  "description": "Generic resource pooling for Node.JS",
  "devDependencies": {
    "eslint": "^3.4.0",
    "eslint-config-standard": "^6.0.0",
    "eslint-plugin-promise": "^3.3.0",
    "eslint-plugin-standard": "^2.0.0",
    "tap": "^8.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "dac22b2c7a7a04e41732f7d8d2d25a303c88f662",
    "tarball": "https://registry.npmjs.org/generic-pool/-/generic-pool-3.1.7.tgz"
  },
  "engines": {
    "node": ">= 4"
  },
  "gitHead": "7865e04007d9d51a282823b91fecc75ef4af6e96",
  "homepage": "https://github.com/coopernurse/node-pool#readme",
  "keywords": [
    "pool",
    "pooling",
    "throttle"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "coopernurse",
      "email": "james@bitmechanic.com"
    },
    {
      "name": "sandfox",
      "email": "james.butler@sandfox.co.uk"
    }
  ],
  "name": "generic-pool",
  "optionalDependencies": {},
  "readme": "[![build status](https://secure.travis-ci.org/coopernurse/node-pool.png)](http://travis-ci.org/coopernurse/node-pool)\n\n# Generic Pool\n\n## About\n\n  Generic resource pool with Promise based API. Can be used to reuse or throttle usage of expensive resources such as database connections.\n\n\n\n**V3 upgrade warning**\n\nVersion 3 contains many breaking changes. The differences are mostly minor and I hope easy to accomodate. There is a very rough and basic [upgrade guide](https://gist.github.com/sandfox/5ca20648b60a0cb959638c0cd6fcd02d) I've written, improvements and other attempts most welcome.\n\nIf you are after the older version 2 of this library you should look at the [current github branch](https://github.com/coopernurse/node-pool/tree/v2.5) for it.\n\n\n## History\n\nThe history has been moved to the [CHANGELOG](CHANGELOG.md)\n\n\n## Installation\n\n```sh\n$ npm install generic-pool [--save]\n```\n\n\n## Example\n\nHere is an example using a fictional generic database driver that doesn't implement any pooling whatsoever itself.\n\n```js\nvar genericPool = require('generic-pool');\nvar DbDriver = require('some-db-driver');\n\n/**\n * Step 1 - Create pool using a factory object\n */\nconst factory = {\n    create: function(){\n\t\t return new Promise(function(resolve, reject){\n\t        var client = DbDriver.createClient()\n\t        client.on('connected', function(){\n\t            resolve(client)\n\t        })\n\t    })\n    },\n    destroy: function(client){\n        return new Promise(function(resolve){\n          client.on('end', function(){\n            resolve()\n          })\n          client.disconnect()\n        })\n    }\n}\n\nvar opts = {\n    max: 10, // maximum size of the pool\n    min: 2 // minimum size of the pool\n}\n\nvar myPool = genericPool.createPool(factory, opts)\n\n/**\n * Step 2 - Use pool in your code to acquire/release resources\n */\n\n// acquire connection - Promise is resolved\n// once a resource becomes available\nconst resourcePromise = myPool.acquire()\n\nresourcePromise.then(function(client) {\n\tclient.query(\"select * from foo\", [], function() {\n\t    // return object back to pool\n\t    myPool.release(client);\n\t});\n})\n.catch(function(err){\n   // handle error - this is generally a timeout or maxWaitingClients \n   // error\n});\n\n/**\n * Step 3 - Drain pool during shutdown (optional)\n */\n// Only call this once in your application -- at the point you want\n// to shutdown and stop using this pool.\nmyPool.drain().then(function() {\n    myPool.clear();\n});\n\n```\n\n\n## Documentation\n\n\n\n### Creating a pool\n\nWhilst it is possible to directly instantiate the Pool class directly, it is recommended to use the `createPool` function exported by module as the constructor method signature may change in the future.\n\n### createPool\n\nThe createPool function takes two arguments:\n\n- `factory` :  an object containing functions to create/destroy/test resources for the `Pool`\n- `opts` : an optional object/dictonary to allow configuring/altering behaviour the of the `Pool`\n\n```js\nconst genericPool = require('generic-pool')\nconst pool = genericPool.createPool(factory, opts)\n```\n\n**factory**\n\nCan be any object/instance but must have the following properties:\n\n- `create` : a function that the pool will call when it wants a new resource. It should return a Promise that either resolves to a `resource` or rejects to an `Error` if it is unable to create a resourse for whatever.\n- `destroy`: a function that the pool will call when it wants to destroy a resource. It should accept one argument `resource` where `resource` is whatever `factory.create` made. The `destroy` function should return a `Promise` that resolves once it has destroyed the resource.\n\n\noptionally it can also have the following property:\n\n- `validate`: a function that the pool will call if it wants to validate a resource. It should accept one argument `resource` where `resource` is whatever `factory.create` made. Should return a `Promise` that resolves a `boolean` where `true` indicates the resource is still valid or `false` if the resource is invalid. \n\n_Note: The values returned from `create`, `destroy`, and `validate` are all wrapped in a `Promise.resolve` by the pool before being used internally._\n\n**opts**\n\nAn optional object/dictionary with the any of the following properties: \n\n- `max`: maximum number of resources to create at any given time. (default=1)\n- `min`: minimum number of resources to keep in pool at any given time. If this is set >= max, the pool will silently set the min to equal `max`. (default=0)\n- `maxWaitingClients`: maximum number of queued requests allowed, additional `acquire` calls will be callback with an `err` in a future cycle of the event loop.\n- `testOnBorrow`: `boolean`: should the pool validate resources before giving them to clients. Requires that either `factory.validate` or `factory.validateAsync` to be specified\n- `acquireTimeoutMillis`: max milliseconds an `acquire` call will wait for a resource before timing out. (default no limit), if supplied should non-zero positive integer.\n- `fifo` : if true the oldest resources will be first to be allocated. If false the most recently released resources will be the first to be allocated. This in effect turns the pool's behaviour from a queue into a stack. `boolean`, (default true)\n- `priorityRange`: int between 1 and x - if set, borrowers can specify their relative priority in the queue if no resources are available.\n                         see example.  (default 1)\n- `autostart`: boolean, should the pool start creating resources etc once the constructor is called, (default true)\n- `evictionRunIntervalMillis`: How often to run eviction checks. Default: 0 (does not run).\n- `numTestsPerRun`: Number of resources to check each eviction run.  Default: 3.\n- `softIdleTimeoutMillis`: amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object evictor (if any), with the extra condition that at least \"min idle\" object instances remain in the pool. Default -1 (nothing can get evicted)\n- `idleTimeoutMillis`: the minimum amount of time that an object may sit idle in the pool before it is eligible for eviction due to idle time. Supercedes `softIdleTimeoutMillis` Default: 30000\n- `Promise`: Promise lib, a Promises/A+ implementation that the pool should use. Defaults to whatever `global.Promise` is (usually native promises).\n\n### pool.acquire\n\n```js\nconst onfulfilled = function(resource){\n\tresource.doStuff()\n\t// release/destroy/etc\n}\n\npool.acquire().then(onfulfilled)\n//or\nconst priority = 2\npool.acquire(priority).then(onfulfilled)\n```\n\nThis function is for when you want to \"borrow\" a resource from the pool.\n\n`acquire` takes one optional argument:\n\n- `priority`: optional, number, see **Priority Queueing** below.\n\nand returns a `Promise`\nOnce a resource in the pool is available, the promise will be resolved with a `resource` (whatever `factory.create` makes for you). If the Pool is unable to give a resource (e.g timeout) then the promise will be rejected with an `Error`\n\n### pool.release\n\n```js\npool.release(resource)\n```\n\nThis function is for when you want to return a resource to the pool.\n\n`release` takes one required argument:\n\n- `resource`: a previously borrowed resource\n\nand returns a `Promise`. This promise will resolve once the `resource` is accepted by the pool, or reject if the pool is unable to accept the `resource` for any reason (e.g `resource` is not a resource or object that came from the pool). If you do not care the outcome it is safe to ignore this promise.\n\n### pool.destroy\n\n```js\npool.destroy(resource)\n```\n\nThis function is for when you want to return a resource to the pool but want it destroyed rather than being made available to other resources. E.g you may know the resource has timed out or crashed.\n\n`destroy` takes one required argument:\n\n- `resource`: a previously borrowed resource\n\nand returns a `Promise`. This promise will resolve once the `resource` is accepted by the pool, or reject if the pool is unable to accept the `resource` for any reason (e.g `resource` is not a resource or object that came from the pool). If you do not care the outcome it is safe to ignore this promise.\n\n### pool.on\n\n```js\npool.on('factoryCreateError', function(err){\n  //log stuff maybe\n})\n\npool.on('factoryDestroyError', function(err){\n  //log stuff maybe\n})\n```\n\nThe pool is an event emitter. Below are the events it emits and any args for those events\n\n- `factoryCreateError` : emitted when a promise returned by `factory.create` is rejected. If this event has no listeners then the `error` will be silently discarded\n  - `error`: whatever `reason` the promise was rejected with. \n\n- `factoryDestroyError` : emitted when a promise returned by `factory.destroy` is rejected. If this event has no listeners then the `error` will be silently discarded\n  - `error`: whatever `reason` the promise was rejected with.\n\n## Idle Object Eviction\n\nThe pool has an evictor (off by default) which will inspect idle items in the pool and `destroy` them if they are too old.\n\nBy default the evictor does not run, to enable it you must set the `evictionRunIntervalMillis` option to a non-zero value. Once enable the evictor will check at most `numTestsPerEvictionRun` each time, this is to stop it blocking your application if you have lots of resources in the pool.\n\n\n## Priority Queueing\n\nThe pool supports optional priority queueing.  This becomes relevant when no resources are available and the caller has to wait. `acquire()` accepts an optional priority int which\nspecifies the caller's relative position in the queue. Each priority slot has it's own internal queue created for it. When a resource is available for borrowing, the first request in the highest priority queue will be given it.\n\nSpecifying a `priority` to `acquire` that is outside the `priorityRange` set at `Pool` creation time will result in the `priority` being converted the lowest possible `priority` \n\n```js\n// create pool with priorityRange of 3\n// borrowers can specify a priority 0 to 2\nconst opts = {\n  priorityRange : 3\n}\nconst pool = genericPool.createPool(someFactory,opts);\n\n// acquire connection - no priority specified - will go onto lowest priority queue\npool.acquire().then(function(client) {\n    pool.release(client);\n});\n\n// acquire connection - high priority - will go into highest priority queue\npool.acquire(0).then(function(client) {\n    pool.release(client);\n});\n\n// acquire connection - medium priority - will go into 'mid' priority queue\npool.acquire(1).then(function(client) {\n    pool.release(client);\n});\n\n// etc..\n```\n\n## Draining\n\nIf you are shutting down a long-lived process, you may notice\nthat node fails to exit for 30 seconds or so.  This is a side\neffect of the idleTimeoutMillis behavior -- the pool has a\nsetTimeout() call registered that is in the event loop queue, so\nnode won't terminate until all resources have timed out, and the pool\nstops trying to manage them.\n\nThis behavior will be more problematic when you set factory.min > 0,\nas the pool will never become empty, and the setTimeout calls will\nnever end.\n\nIn these cases, use the pool.drain() function.  This sets the pool\ninto a \"draining\" state which will gracefully wait until all\nidle resources have timed out.  For example, you can call:\n\nIf you do this, your node process will exit gracefully.\n\nIf you know you would like to terminate all the available resources in your pool before any timeouts they might have are reached, you can use `clear()` in conjunction with `drain()`:\n\n```js\nconst p = pool.drain()\n.then(function() {\n    return pool.clear();\n});\n```\nThe `promise` returned will resolve once all waiting clients have acquired and return resources, and any available resources have been destroyed\n\nOne side-effect of calling `drain()` is that subsequent calls to `acquire()`\nwill throw an Error.\n\n## Pooled function decoration\n\nThis has now been extracted out it's own module [generic-pool-decorator](https://github.com/sandfox/generic-pool-decorator)\n\n## Pool info\n\nThe following properties will let you get information about the pool:\n\n```js\n\n// How many many more resources can the pool manage/create\npool.spareResourceCapacity\n\n// returns number of resources in the pool regardless of\n// whether they are free or in use\npool.size\n\n// returns number of unused resources in the pool\npool.available\n\n// number of resources that are currently acquired by userland code\npool.borrowed\n\n// returns number of callers waiting to acquire a resource\npool.pending\n\n// returns number of maxixmum number of resources allowed by ppol\npool.max\n\n// returns number of minimum number of resources allowed by ppol\npool.min\n\n```\n\n## Run Tests\n\n    $ npm install\n    $ npm test\n\nThe tests are run/written using Tap. Most are ports from the old espresso tests and are not in great condition. Most cases are inside `test/generic-pool-test.js` with newer cases in their own files (legacy reasons).\n\n## Linting\n\nWe use eslint and the `standard` ruleset.\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2010-2016 James Cooper &lt;james@bitmechanic.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/coopernurse/node-pool.git"
  },
  "scripts": {
    "lint": "eslint lib test",
    "lint-fix": "eslint --fix lib test",
    "test": "tap test/*-test.js "
  },
  "version": "3.1.7"
}
